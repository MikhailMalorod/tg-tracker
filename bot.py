"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
"""

import logging
import datetime
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters
)

from database import Database, SESSION_STATUS
from config import TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(START_WORK, WAITING_NOTE_TEXT) = range(2)

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
CB_START_WORK = "cb_start_work"
CB_END_WORK = "cb_end_work"
CB_BREAK_WORK = "break_work"
CB_RESUME_WORK = "resume_work"
CB_ADD_NOTE = "add_note"

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
CB_STATS_DAY = "stats_day"
CB_STATS_WEEK = "stats_week"
CB_STATS_MONTH = "stats_month"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã
WORK_CATEGORIES = ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–≤–µ—â–∞–Ω–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–û–±—É—á–µ–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await Database.add_user(
        user.id,
        user.username,
        user.first_name,
        user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if active_session:
        if active_session["status"] == "active":
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
                [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
            ]
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
                [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
            ]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_START_WORK)]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start_work - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        "/break - –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤\n"
        "/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/my_notes - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫\n"
        "/end_work - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
        reply_markup=reply_markup
    )

async def start_work_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_work."""
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = update.callback_query is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if active_session:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        start_time = datetime.datetime.fromisoformat(active_session["start_time"])
        duration = datetime.datetime.now() - start_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        status_message = ""
        keyboard = []
        
        if active_session["status"] == "active":
            status_message = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!"
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
            ]
        elif active_session["status"] == "paused":
            status_message = "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!"
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = (
            f"{status_message}\n"
            f"–ù–∞—á–∞—Ç–∞: {start_time.strftime('%H:%M:%S')}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if is_callback:
            await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message_text, reply_markup=reply_markup)
            
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞–±–æ—Ç—ã
    keyboard = []
    for category in WORK_CATEGORIES:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
    if is_callback:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup)
    
    return START_WORK

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    category = query.data.replace("category_", "")
    
    print(f"DEBUG: –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
    session_id = await Database.start_work_session(user.id, category)
    
    if session_id == -1:
        await query.edit_message_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!")
        return ConversationHandler.END
    
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ù–∞—á–∞—Ç–∞ —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è ({category})\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {current_time}\n\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def end_work_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end_work."""
    user = update.effective_user
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    session_info = await Database.end_work_session(user.id)
    
    if not session_info:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
    duration_seconds = session_info["duration"]
    hours, remainder = divmod(duration_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    start_time = datetime.datetime.fromisoformat(session_info["start_time"]).strftime("%H:%M:%S")
    end_time = datetime.datetime.fromisoformat(session_info["end_time"]).strftime("%H:%M:%S")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    await update.message.reply_text(
        f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session_info['category']}\n"
        f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time}\n"
        f"‚è±Ô∏è –ö–æ–Ω–µ—Ü: {end_time}\n"
        f"‚åõ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n\n"
        f"–•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
    )

async def break_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /break."""
    user = update.effective_user
    
    print(f"DEBUG: –í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ break –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ—Ä—ã–≤–∞
    reason = "–ü–µ—Ä–µ—Ä—ã–≤"
    if context.args:
        reason = " ".join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if active_session["status"] == SESSION_STATUS["PAUSED"]:
        await update.message.reply_text(
            "–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume"
        )
        return
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session = await Database.pause_work_session(user.id, reason)
    
    if not session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
    start_time = datetime.datetime.fromisoformat(session["start_time"])
    duration = datetime.datetime.now() - start_time
    hours, remainder = divmod(int(duration.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    await update.message.reply_text(
        f"‚è∏Ô∏è –ü–∞—É–∑–∞: \"{reason}\"\n"
        f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º–∏–Ω\n\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume",
        reply_markup=reply_markup
    )

async def resume_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resume."""
    user = update.effective_user
    
    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    session = await Database.resume_work_session(user.id)
    
    if not session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    await update.message.reply_text(
        f"‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è: {current_time}\n\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
        reply_markup=reply_markup
    )

async def note_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /note –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫."""
    user = update.effective_user
    
    print(f"DEBUG: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /note –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["active_session_id"] = active_session["id"]
    context.user_data["is_callback"] = False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    context.application.conversation_key_store[(WAITING_NOTE_TEXT, None, user.id)] = WAITING_NOTE_TEXT
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:"
    )
    
    return WAITING_NOTE_TEXT

async def my_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ—Ç–æ–∫."""
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º—É–º 10)
    notes = await Database.get_user_notes(user.id, limit=10)
    
    if not notes:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫
    message_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    
    for i, note in enumerate(notes, 1):
        timestamp = datetime.datetime.fromisoformat(note["timestamp"]).strftime("%d.%m.%Y %H:%M")
        message_text += (
            f"{i}. {timestamp} - {note['category']}\n"
            f"<i>{note['content'][:100]}{'...' if len(note['content']) > 100 else ''}</i>\n\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    await update.message.reply_text(
        message_text,
        parse_mode="HTML"
    )
    
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data=CB_STATS_DAY),
            InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data=CB_STATS_WEEK),
            InlineKeyboardButton("üìä –ú–µ—Å—è—Ü", callback_data=CB_STATS_MONTH)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

async def stats_period_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    today = datetime.date.today()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ callback_data
    if query.data == CB_STATS_DAY:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        stats = await Database.get_daily_stats(user.id, today)
        await send_daily_stats(query, stats)
    
    elif query.data == CB_STATS_WEEK:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = await Database.get_weekly_stats(user.id, today)
        await send_weekly_stats(query, stats)
    
    elif query.data == CB_STATS_MONTH:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        stats = await Database.get_monthly_stats(user.id, today.year, today.month)
        await send_monthly_stats(query, stats)

async def send_daily_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    break_hours, remainder = divmod(stats["break_duration"], 3600)
    break_minutes, break_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_sessions']}\n"
        f"‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω–æ: {stats['active_sessions']}\n\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º {total_seconds}—Å\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n"
        f"‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_hours}—á {break_minutes}–º {break_seconds}—Å\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
    else:
        message_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def send_weekly_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n"
        f"<i>—Å {stats['start_date']} –ø–æ {stats['end_date']}</i>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
        
        message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    message_text += "<b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    for i, day_stats in enumerate(stats["daily_stats"]):
        day_name = days_of_week[i]
        day_hours, remainder = divmod(day_stats["total_duration"], 3600)
        day_minutes, day_seconds = divmod(remainder, 60)
        
        message_text += f"- {day_name}: {day_stats['completed_sessions']} —Å–µ—Å—Å–∏–π, {day_hours}—á {day_minutes}–º\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def send_monthly_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['month_name']} {stats['year']}</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
        
        message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–¥–µ–ª—è–º
    message_text += "<b>–ü–æ –Ω–µ–¥–µ–ª—è–º:</b>\n"
    for i, week_stats in enumerate(stats["weekly_stats"], 1):
        week_hours, remainder = divmod(week_stats["total_duration"], 3600)
        week_minutes, week_seconds = divmod(remainder, 60)
        
        message_text += (
            f"- –ù–µ–¥–µ–ª—è {i} ({week_stats['start_date']} - {week_stats['end_date']}): "
            f"{week_stats['total_sessions']} —Å–µ—Å—Å–∏–π, {week_hours}—á {week_minutes}–º\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏."""
    user = update.effective_user
    note_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    session_id = active_session["id"]
    
    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {note_text[:20]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    note_id = await Database.add_note(user.id, note_text, session_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
    keyboard = []
    
    if active_session["status"] == SESSION_STATUS["ACTIVE"]:
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
            [InlineKeyboardButton("üìù –ï—â–µ –∑–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
    elif active_session["status"] == SESSION_STATUS["PAUSED"]:
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
            [InlineKeyboardButton("üìù –ï—â–µ –∑–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    await update.message.reply_text(
        f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"üïò –í—Ä–µ–º—è: {current_time}\n"
        f"üíº –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active_session['category']}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=reply_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    print(f"DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == CB_START_WORK:
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
        await start_work_command(update, context)
    
    elif query.data == CB_END_WORK:
        user = query.from_user
        session_info = await Database.end_work_session(user.id)
        
        if not session_info:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        start_time = datetime.datetime.fromisoformat(session_info["start_time"])
        end_time = datetime.datetime.fromisoformat(session_info["end_time"]) 
        hours, remainder = divmod(session_info["duration"], 3600)
        minutes, seconds = divmod(remainder, 60)
        
        await query.edit_message_text(
            f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session_info['category']}\n"
            f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M:%S')}\n"
            f"‚è±Ô∏è –ö–æ–Ω–µ—Ü: {end_time.strftime('%H:%M:%S')}\n"
            f"‚åõ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n\n"
            f"–•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
    
    elif query.data == CB_BREAK_WORK:
        user = query.from_user
        
        # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await Database.pause_work_session(user.id, "–ü–µ—Ä–µ—Ä—ã–≤")
        
        if not session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
            [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data=CB_END_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
        start_time = datetime.datetime.fromisoformat(session["start_time"])
        duration = datetime.datetime.now() - start_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        await query.edit_message_text(
            f"‚è∏Ô∏è –ü–∞—É–∑–∞: \"–ü–µ—Ä–µ—Ä—ã–≤\"\n"
            f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º–∏–Ω\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume",
            reply_markup=reply_markup
        )
    
    elif query.data == CB_RESUME_WORK:
        user = query.from_user
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session = await Database.resume_work_session(user.id)
        
        if not session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
            [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        
        await query.edit_message_text(
            f"‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: {current_time}\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
            reply_markup=reply_markup
        )
    
    elif query.data == CB_ADD_NOTE:
        user = query.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        active_session = await Database.get_active_session(user.id)
        
        if not active_session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["active_session_id"] = active_session["id"]
        context.user_data["is_callback"] = True
        context.user_data["original_message"] = query.message
        
        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏:"
        )

async def init() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    await Database.init_db()

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import asyncio
    asyncio.run(init())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).connect_timeout(30.0).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("end_work", end_work_command))
    application.add_handler(CommandHandler("break", break_command))
    application.add_handler(CommandHandler("resume", resume_command))
    application.add_handler(CommandHandler("note", note_command))
    application.add_handler(CommandHandler("my_notes", my_notes_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("start_work", start_work_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç—ã
    application.add_handler(CallbackQueryHandler(category_callback, pattern=r"^category_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CallbackQueryHandler(stats_period_callback, pattern=r"^stats_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–º–µ—Ç–∫–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_note))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)
    if update and isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

if __name__ == "__main__":
    main()