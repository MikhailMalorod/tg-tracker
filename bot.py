"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
"""

import logging
import datetime
import asyncio
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters
)

import aiosqlite
from database import Database, SESSION_STATUS
from config import (
    TELEGRAM_BOT_TOKEN,
    get_work_categories,
    get_note_categories,
    reload_categories,
    get_categories_info
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(START_WORK, WAITING_NOTE_TEXT, WAITING_NOTE_CATEGORY) = range(3)

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
CB_START_WORK = "cb_start_work"
CB_END_WORK = "cb_end_work"
CB_BREAK_WORK = "break_work"
CB_RESUME_WORK = "resume_work"
CB_ADD_NOTE = "add_note"

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
CB_STATS_DAY = "stats_day"
CB_STATS_WEEK = "stats_week"
CB_STATS_MONTH = "stats_month"

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
CB_EXPORT_CSV = "export_csv"

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
CB_REMINDERS_SETTINGS = "reminders_settings"
CB_WORK_REMINDER_TOGGLE = "work_reminder_toggle"
CB_BREAK_REMINDER_TOGGLE = "break_reminder_toggle"
CB_LONG_BREAK_REMINDER_TOGGLE = "long_break_reminder_toggle"
CB_DAILY_GOAL_TOGGLE = "daily_goal_toggle"

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
CB_CALENDAR_DAY = "calendar_day_"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ config.py
# WORK_CATEGORIES –∏ NOTE_CATEGORIES —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_work_categories() –∏ get_note_categories()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await Database.add_user(
        user.id,
        user.username,
        user.first_name,
        user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if active_session:
        if active_session["status"] == "active":
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
                [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=CB_REMINDERS_SETTINGS)],
                [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_show")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
            ]
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
                [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=CB_REMINDERS_SETTINGS)],
                [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_show")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
            ]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_START_WORK)],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
            [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
            [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=CB_REMINDERS_SETTINGS)],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_show")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start_work - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        "/break - –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤\n"
        "/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/my_notes - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫\n"
        "/end_work - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n"
        "/reminders - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/calendar - –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç—ã\n"
        "/categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        reply_markup=reply_markup
    )

async def start_work_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_work."""
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = update.callback_query is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    
    if active_session:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        start_time = datetime.datetime.fromisoformat(active_session["start_time"])
        duration = datetime.datetime.now() - start_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        status_message = ""
        keyboard = []
        
        if active_session["status"] == "active":
            status_message = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!"
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
            ]
        elif active_session["status"] == "paused":
            status_message = "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!"
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = (
            f"{status_message}\n"
            f"–ù–∞—á–∞—Ç–∞: {start_time.strftime('%H:%M:%S')}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if is_callback:
            await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message_text, reply_markup=reply_markup)
            
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞–±–æ—Ç—ã
    work_categories = get_work_categories()
    keyboard = []
    for category in work_categories:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
    if is_callback:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup)
    
    return START_WORK

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    category = query.data.replace("category_", "")
    
    print(f"DEBUG: –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
    session_id = await Database.start_work_session(user.id, category)
    
    if session_id == -1:
        await query.edit_message_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è!")
        return ConversationHandler.END
    
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
        [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ù–∞—á–∞—Ç–∞ —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è ({category})\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {current_time}\n\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def end_work_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end_work."""
    user = update.effective_user
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    session_info = await Database.end_work_session(user.id)
    
    if not session_info:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
    duration_seconds = session_info["duration"]
    hours, remainder = divmod(duration_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    start_time = datetime.datetime.fromisoformat(session_info["start_time"]).strftime("%H:%M:%S")
    end_time = datetime.datetime.fromisoformat(session_info["end_time"]).strftime("%H:%M:%S")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    await update.message.reply_text(
        f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session_info['category']}\n"
        f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time}\n"
        f"‚è±Ô∏è –ö–æ–Ω–µ—Ü: {end_time}\n"
        f"‚åõ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n\n"
        f"–•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
    )

async def break_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /break."""
    user = update.effective_user
    
    print(f"DEBUG: –í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ break –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ—Ä—ã–≤–∞
    reason = "–ü–µ—Ä–µ—Ä—ã–≤"
    if context.args:
        reason = " ".join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)
    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if active_session["status"] == SESSION_STATUS["PAUSED"]:
        await update.message.reply_text(
            "–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume"
        )
        return
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    session = await Database.pause_work_session(user.id, reason)
    
    if not session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
        [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
    start_time = datetime.datetime.fromisoformat(session["start_time"])
    duration = datetime.datetime.now() - start_time
    hours, remainder = divmod(int(duration.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    await update.message.reply_text(
        f"‚è∏Ô∏è –ü–∞—É–∑–∞: \"{reason}\"\n"
        f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º–∏–Ω\n\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume",
        reply_markup=reply_markup
    )

async def resume_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resume."""
    user = update.effective_user
    
    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    session = await Database.resume_work_session(user.id)
    
    if not session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
        [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    await update.message.reply_text(
        f"‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è: {current_time}\n\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
        reply_markup=reply_markup
    )

async def note_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /note –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫."""
    user = update.effective_user

    print(f"DEBUG: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /note –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)

    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["active_session_id"] = active_session["id"]
    context.user_data["is_callback"] = False

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–º–µ—Ç–æ–∫
    note_categories = get_note_categories()
    keyboard = []
    for category in note_categories:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"note_category_{category}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=reply_markup
    )

    return WAITING_NOTE_CATEGORY

async def my_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ—Ç–æ–∫."""
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º—É–º 10)
    notes = await Database.get_user_notes(user.id, limit=10)
    
    if not notes:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫
    message_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    
    for i, note in enumerate(notes, 1):
        timestamp = datetime.datetime.fromisoformat(note["timestamp"]).strftime("%d.%m.%Y %H:%M")
        message_text += (
            f"{i}. {timestamp} - [{note['category']}] - {note['session_category']}\n"
            f"<i>{note['content'][:100]}{'...' if len(note['content']) > 100 else ''}</i>\n\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    await update.message.reply_text(
        message_text,
        parse_mode="HTML"
    )

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV."""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    sessions = await Database.get_sessions_by_timeframe(user.id, datetime.datetime.min, datetime.datetime.max)

    if not sessions:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    await update.message.reply_text(
        "üìä –ì–æ—Ç–æ–≤–ª—é CSV —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    import tempfile
    import os

    temp_dir = tempfile.gettempdir()
    file_path = os.path.join(temp_dir, f'work_tracker_export_{user.id}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')

    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await Database.export_user_data_to_csv(user.id, file_path)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_document(
                document=open(file_path, 'rb'),
                filename=f'work_tracker_{user.first_name}_{datetime.datetime.now().strftime("%Y%m%d")}.csv',
                caption="üìä –í–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)

        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            os.remove(file_path)
        except:
            pass

async def reminders_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await Database.get_reminder_settings(user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    keyboard = [
        [
            InlineKeyboardButton(
                f"üíº –†–∞–±–æ—Ç–∞ {'‚úÖ' if settings['work_reminder_enabled'] else '‚ùå'}",
                callback_data=CB_WORK_REMINDER_TOGGLE
            )
        ],
        [
            InlineKeyboardButton(
                f"‚òï –ü–µ—Ä–µ—Ä—ã–≤ {'‚úÖ' if settings['break_reminder_enabled'] else '‚ùå'}",
                callback_data=CB_BREAK_REMINDER_TOGGLE
            )
        ],
        [
            InlineKeyboardButton(
                f"‚è∞ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ {'‚úÖ' if settings['long_break_reminder_enabled'] else '‚ùå'}",
                callback_data=CB_LONG_BREAK_REMINDER_TOGGLE
            )
        ],
        [
            InlineKeyboardButton(
                f"üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å {'‚úÖ' if settings['daily_goal_enabled'] else '‚ùå'}",
                callback_data=CB_DAILY_GOAL_TOGGLE
            )
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data=CB_REMINDERS_SETTINGS)
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    message_text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "üíº –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ: –∫–∞–∂–¥—ã–µ {} –º–∏–Ω {}\n"
        "‚òï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ: –∫–∞–∂–¥—ã–µ {} –º–∏–Ω {}\n"
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ: –∫–∞–∂–¥—ã–µ {} –º–∏–Ω {}\n"
        "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: {} –º–∏–Ω {}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    ).format(
        settings['work_reminder_minutes'],
        '‚úÖ' if settings['work_reminder_enabled'] else '‚ùå',
        settings['break_reminder_minutes'],
        '‚úÖ' if settings['break_reminder_enabled'] else '‚ùå',
        settings['long_break_reminder_minutes'],
        '‚úÖ' if settings['long_break_reminder_enabled'] else '‚ùå',
        settings['daily_goal_minutes'],
        '‚úÖ' if settings['daily_goal_enabled'] else '‚ùå'
    )

    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def reminders_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    query = update.callback_query
    await query.answer()

    user = query.from_user

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await Database.get_reminder_settings(user.id)

    if query.data == CB_WORK_REMINDER_TOGGLE:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ
        await Database.update_reminder_settings(
            user.id,
            work_reminder_enabled=1 if not settings['work_reminder_enabled'] else 0
        )

    elif query.data == CB_BREAK_REMINDER_TOGGLE:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
        await Database.update_reminder_settings(
            user.id,
            break_reminder_enabled=1 if not settings['break_reminder_enabled'] else 0
        )

    elif query.data == CB_LONG_BREAK_REMINDER_TOGGLE:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ
        await Database.update_reminder_settings(
            user.id,
            long_break_reminder_enabled=1 if not settings['long_break_reminder_enabled'] else 0
        )

    elif query.data == CB_DAILY_GOAL_TOGGLE:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å
        await Database.update_reminder_settings(
            user.id,
            daily_goal_enabled=1 if not settings['daily_goal_enabled'] else 0
        )

    elif query.data == CB_REMINDERS_SETTINGS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        keyboard = [
            [
                InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–º–∏–Ω)", callback_data="set_work_time"),
                InlineKeyboardButton(f"{settings['work_reminder_minutes']}", callback_data="work_time_current")
            ],
            [
                InlineKeyboardButton("‚òï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω)", callback_data="set_break_time"),
                InlineKeyboardButton(f"{settings['break_reminder_minutes']}", callback_data="break_time_current")
            ],
            [
                InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω)", callback_data="set_long_break_time"),
                InlineKeyboardButton(f"{settings['long_break_reminder_minutes']}", callback_data="long_break_time_current")
            ],
            [
                InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å (–º–∏–Ω)", callback_data="set_daily_goal"),
                InlineKeyboardButton(f"{settings['daily_goal_minutes']}", callback_data="daily_goal_current")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reminders")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return

    elif query.data.startswith("set_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_type = query.data.replace("set_", "").replace("_time", "_reminder_minutes")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data["setting_reminder_time"] = time_type
        context.user_data["is_callback"] = True

        await query.edit_message_text(
            f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {query.data.replace('set_', '').replace('_time', '').replace('_', ' ')} (–≤ –º–∏–Ω—É—Ç–∞—Ö):"
        )

    elif query.data == "back_to_reminders":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await reminders_command(query.message, context)

    elif query.data.endswith("_current"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        time_type = query.data.replace("_current", "").replace("_time", "_reminder_minutes")
        time_name = query.data.replace("_time_current", "").replace("_", " ").title()

        await query.edit_message_text(
            f"üìä <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {time_name}</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {time_name}\" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è."
        )

    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await reminders_command(query.message, context)

async def handle_reminder_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if context.user_data.get("setting_reminder_time"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await _process_reminder_time_input(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–º–µ—Ç–∫–∞–º
        await save_note(update, context)

async def _process_reminder_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user = update.effective_user

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        minutes_str = update.message.text.strip()
        minutes = int(minutes_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏–π
        if minutes < 1 or minutes > 10080:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è –≤ –º–∏–Ω—É—Ç–∞—Ö
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10080 (–º–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è –≤ –º–∏–Ω—É—Ç–∞—Ö)."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        time_type = context.user_data["setting_reminder_time"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await Database.update_reminder_settings(user.id, **{time_type: minutes})

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop("setting_reminder_time", None)
        context.user_data.pop("is_callback", None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /reminders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60)."
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        )

async def calendar_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calendar –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ä–∞–±–æ—Ç—ã."""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    sessions = await Database.get_sessions_by_timeframe(user.id, datetime.datetime.min, datetime.datetime.max)

    if not sessions:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    await show_calendar_month(update.message, user.id)

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    categories_info = get_categories_info()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="reload_categories")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="edit_categories")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    message_text = (
        "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç—ã: {len(categories_info['work_categories'])}\n"
        f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–º–µ—Ç–æ–∫: {len(categories_info['note_categories'])}\n"
        f"üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {categories_info['file_path']}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."
    )

    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def show_calendar_month(message, user_id: int, year: int = None, month: int = None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü."""
    if year is None or month is None:
        today = datetime.date.today()
        year, month = today.year, today.month

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–∞
    import calendar
    cal = calendar.monthcalendar(year, month)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    month_stats = {}
    for week in cal:
        for day in week:
            if day > 0:
                day_date = datetime.date(year, month, day)
                stats = await Database.get_daily_stats(user_id, day_date)
                month_stats[day] = stats

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = calendar.month_name[month]
    keyboard.append([InlineKeyboardButton(f"üìÖ {month_name} {year}", callback_data="calendar_ignore")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_row = []
    for day_name in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']:
        days_row.append(InlineKeyboardButton(day_name, callback_data="calendar_ignore"))
    keyboard.append(days_row)

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in cal:
        week_row = []
        for day in week:
            if day == 0:
                # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ/—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                week_row.append(InlineKeyboardButton(" ", callback_data="calendar_ignore"))
            else:
                stats = month_stats.get(day, {})
                total_duration = stats.get('total_duration', 0)

                if total_duration > 0:
                    hours, remainder = divmod(total_duration, 3600)
                    minutes = remainder // 60

                    if hours > 0:
                        day_text = f"{day} ({hours}—á)"
                    else:
                        day_text = f"{day} ({minutes}–º)"
                else:
                    day_text = str(day)

                week_row.append(InlineKeyboardButton(day_text, callback_data=f"calendar_day_{year}_{month}_{day}"))

        keyboard.append(week_row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if month > 1:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"calendar_month_{year}_{month-1}"))
    else:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="calendar_ignore"))

    nav_row.append(InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"calendar_today"))
    nav_row.append(InlineKeyboardButton(f"{month}/{year}", callback_data="calendar_ignore"))

    if month < 12:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"calendar_month_{year}_{month+1}"))
    else:
        nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="calendar_ignore"))

    keyboard.append(nav_row)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(
        "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        "–ß–∏—Å–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö –∏–ª–∏ –º–∏–Ω—É—Ç–∞—Ö.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "calendar_today" or data == "calendar_show":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        await show_calendar_month(query.message, query.from_user.id)

    elif data.startswith("calendar_month_"):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É –º–µ—Å—è—Ü—É
        parts = data.split("_")
        if len(parts) >= 4:
            year, month = parts[2], parts[3]
            await show_calendar_month(query.message, query.from_user.id, int(year), int(month))
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return

    elif data.startswith("calendar_day_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        parts = data.split("_")
        if len(parts) >= 4:
            year, month, day = parts[2], parts[3], parts[4]
            selected_date = datetime.date(int(year), int(month), int(day))
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return

        stats = await Database.get_daily_stats(query.from_user.id, selected_date)
        await show_day_stats(query, stats)

    elif data == "calendar_ignore":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        pass

async def show_day_stats(query, stats: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)

    break_hours, remainder = divmod(stats["break_duration"], 3600)
    break_minutes, break_seconds = divmod(remainder, 60)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_sessions']}\n"
        f"‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω–æ: {stats['active_sessions']}\n\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º {total_seconds}—Å\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n"
        f"‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_hours}—á {break_minutes}–º {break_seconds}—Å\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
    else:
        message_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="calendar_today")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "show_categories":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_info = get_categories_info()

        message_text = (
            "üìã <b>–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã:</b>\n"
            f"{', '.join(f'‚Ä¢ {cat}' for cat in categories_info['work_categories'])}\n\n"
            "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–æ–∫:</b>\n"
            f"{', '.join(f'‚Ä¢ {cat}' for cat in categories_info['note_categories'])}\n\n"
            f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑: {categories_info['file_path']}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: {categories_info['last_load_time'][:19]}"
        )

        await query.edit_message_text(
            text=message_text,
            parse_mode="HTML"
        )

    elif query.data == "reload_categories":
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        reload_result = reload_categories()

        if reload_result.get('loaded_from_file'):
            message_text = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"
        else:
            message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"

        await query.edit_message_text(
            text=message_text
        )

    elif query.data == "edit_categories":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
        message_text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª <code>categories.json</code>\n\n"
            "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:</b>\n"
            "<code>{\n"
            '  "work_categories": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–≤–µ—â–∞–Ω–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"],\n'
            '  "note_categories": ["–û–±—â–µ–µ", "–ò–¥–µ—è", "–ó–∞–¥–∞—á–∞"]\n'
            "}</code>\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/categories</code> ‚Üí <code>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</code>"
        )

        await query.edit_message_text(
            text=message_text,
            parse_mode="HTML"
        )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sessions = await Database.get_sessions_by_timeframe(user.id, datetime.datetime.min, datetime.datetime.max)

    if not sessions:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data=CB_STATS_DAY),
            InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data=CB_STATS_WEEK),
            InlineKeyboardButton("üìä –ú–µ—Å—è—Ü", callback_data=CB_STATS_MONTH)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

async def stats_period_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    today = datetime.date.today()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ callback_data
    if query.data == CB_STATS_DAY:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        stats = await Database.get_daily_stats(user.id, today)
        await send_daily_stats(query, stats)

    elif query.data == CB_STATS_WEEK:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = await Database.get_weekly_stats(user.id, today)
        await send_weekly_stats(query, stats)

    elif query.data == CB_STATS_MONTH:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        stats = await Database.get_monthly_stats(user.id, today.year, today.month)
        await send_monthly_stats(query, stats)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

async def note_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    category = query.data.replace("note_category_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["note_category"] = category

    await query.edit_message_text(
        f"üìù –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:"
    )

    return WAITING_NOTE_TEXT

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
    if hasattr(query, 'message') and query.message:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        active_session = await Database.get_active_session(user.id)

        if active_session:
            if active_session["status"] == "active":
                keyboard = [
                    [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
                    [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                    [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                    [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
                    [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                    [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)],
                    [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
                ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_START_WORK)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CB_STATS_DAY)],
                [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=CB_EXPORT_CSV)]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.edit_message_reply_markup(reply_markup=reply_markup)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫

async def send_daily_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    break_hours, remainder = divmod(stats["break_duration"], 3600)
    break_minutes, break_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_sessions']}\n"
        f"‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω–æ: {stats['active_sessions']}\n\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º {total_seconds}—Å\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n"
        f"‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_hours}—á {break_minutes}–º {break_seconds}—Å\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
    else:
        message_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def send_weekly_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n"
        f"<i>—Å {stats['start_date']} –ø–æ {stats['end_date']}</i>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
        
        message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    message_text += "<b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    for i, day_stats in enumerate(stats["daily_stats"]):
        day_name = days_of_week[i]
        day_hours, remainder = divmod(day_stats["total_duration"], 3600)
        day_minutes, day_seconds = divmod(remainder, 60)
        
        message_text += f"- {day_name}: {day_stats['completed_sessions']} —Å–µ—Å—Å–∏–π, {day_hours}—á {day_minutes}–º\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def send_monthly_stats(query: CallbackQuery, stats: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü."""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    total_hours, remainder = divmod(stats["total_duration"], 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['month_name']} {stats['year']}</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
        f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_hours}—á {total_minutes}–º\n"
        f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if stats["categories"]:
        message_text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, data in stats["categories"].items():
            cat_hours, remainder = divmod(data["duration"], 3600)
            cat_minutes, cat_seconds = divmod(remainder, 60)
            message_text += f"- {category}: {data['count']} —Å–µ—Å—Å–∏–π, {cat_hours}—á {cat_minutes}–º\n"
        
        message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–¥–µ–ª—è–º
    message_text += "<b>–ü–æ –Ω–µ–¥–µ–ª—è–º:</b>\n"
    for i, week_stats in enumerate(stats["weekly_stats"], 1):
        week_hours, remainder = divmod(week_stats["total_duration"], 3600)
        week_minutes, week_seconds = divmod(remainder, 60)
        
        message_text += (
            f"- –ù–µ–¥–µ–ª—è {i} ({week_stats['start_date']} - {week_stats['end_date']}): "
            f"{week_stats['total_sessions']} —Å–µ—Å—Å–∏–π, {week_hours}—á {week_minutes}–º\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML"
    )

async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏."""
    user = update.effective_user
    note_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    active_session = await Database.get_active_session(user.id)

    if not active_session:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
        return

    session_id = active_session["id"]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    note_category = context.user_data.get("note_category", "–û–±—â–µ–µ")

    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {note_text[:20]}... –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {note_category}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    note_id = await Database.add_note(user.id, note_text, session_id, note_category)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
    keyboard = []
    
    if active_session["status"] == SESSION_STATUS["ACTIVE"]:
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
            [InlineKeyboardButton("üìù –ï—â–µ –∑–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
    elif active_session["status"] == SESSION_STATUS["PAUSED"]:
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
            [InlineKeyboardButton("üìù –ï—â–µ –∑–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    await update.message.reply_text(
        f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"üïò –í—Ä–µ–º—è: {current_time}\n"
        f"üíº –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active_session['category']}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=reply_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    print(f"DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == CB_START_WORK:
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
        await start_work_command(update, context)
    
    elif query.data == CB_END_WORK:
        user = query.from_user
        session_info = await Database.end_work_session(user.id)
        
        if not session_info:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        start_time = datetime.datetime.fromisoformat(session_info["start_time"])
        end_time = datetime.datetime.fromisoformat(session_info["end_time"]) 
        hours, remainder = divmod(session_info["duration"], 3600)
        minutes, seconds = divmod(remainder, 60)
        
        await query.edit_message_text(
            f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session_info['category']}\n"
            f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M:%S')}\n"
            f"‚è±Ô∏è –ö–æ–Ω–µ—Ü: {end_time.strftime('%H:%M:%S')}\n"
            f"‚åõ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n\n"
            f"–•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
        )
    
    elif query.data == CB_BREAK_WORK:
        user = query.from_user
        
        # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await Database.pause_work_session(user.id, "–ü–µ—Ä–µ—Ä—ã–≤")
        
        if not session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=CB_RESUME_WORK)],
            [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data=CB_END_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
        start_time = datetime.datetime.fromisoformat(session["start_time"])
        duration = datetime.datetime.now() - start_time
        hours, remainder = divmod(int(duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        await query.edit_message_text(
            f"‚è∏Ô∏è –ü–∞—É–∑–∞: \"–ü–µ—Ä–µ—Ä—ã–≤\"\n"
            f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º–∏–Ω\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume",
            reply_markup=reply_markup
        )
    
    elif query.data == CB_RESUME_WORK:
        user = query.from_user
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session = await Database.resume_work_session(user.id)
        
        if not session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=CB_BREAK_WORK)],
            [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=CB_ADD_NOTE)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=CB_END_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        
        await query.edit_message_text(
            f"‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: {current_time}\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /end_work",
            reply_markup=reply_markup
        )
    
    elif query.data == CB_ADD_NOTE:
        user = query.from_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        active_session = await Database.get_active_session(user.id)

        if not active_session:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏.\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_work"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["active_session_id"] = active_session["id"]
        context.user_data["is_callback"] = True

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–º–µ—Ç–æ–∫
        note_categories = get_note_categories()
        keyboard = []
        for category in note_categories:
            keyboard.append([InlineKeyboardButton(category, callback_data=f"note_category_{category}")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=reply_markup
        )

    elif query.data == CB_EXPORT_CSV:
        user = query.from_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        sessions = await Database.get_sessions_by_timeframe(user.id, datetime.datetime.min, datetime.datetime.max)

        if not sessions:
            await query.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await query.edit_message_text(
            "üìä –ì–æ—Ç–æ–≤–ª—é CSV —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        import tempfile
        import os

        temp_dir = tempfile.gettempdir()
        file_path = os.path.join(temp_dir, f'work_tracker_export_{user.id}_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')

        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await Database.export_user_data_to_csv(user.id, file_path)

            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —á–µ—Ä–µ–∑ edit_message_text)
                # –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    "üìä –§–∞–π–ª –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –æ—Ç—á–µ—Ç..."
                )

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=open(file_path, 'rb'),
                    filename=f'work_tracker_{user.first_name}_{datetime.datetime.now().strftime("%Y%m%d")}.csv',
                    caption="üìä –í–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)

            else:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                os.remove(file_path)
            except:
                pass

async def init() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    await Database.init_db()

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import asyncio
    asyncio.run(init())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).connect_timeout(30.0).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("end_work", end_work_command))
    application.add_handler(CommandHandler("break", break_command))
    application.add_handler(CommandHandler("resume", resume_command))
    application.add_handler(CommandHandler("note", note_command))
    application.add_handler(CommandHandler("my_notes", my_notes_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("export", export_command))
    application.add_handler(CommandHandler("reminders", reminders_command))
    application.add_handler(CommandHandler("calendar", calendar_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("start_work", start_work_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç—ã
    application.add_handler(CallbackQueryHandler(category_callback, pattern=r"^category_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CallbackQueryHandler(stats_period_callback, pattern=r"^stats_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏
    application.add_handler(CallbackQueryHandler(note_category_callback, pattern=r"^note_category_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    application.add_handler(CallbackQueryHandler(reminders_callback, pattern=r"^reminders_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    application.add_handler(CallbackQueryHandler(calendar_callback, pattern=r"^calendar_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    application.add_handler(CallbackQueryHandler(categories_callback, pattern=r"^show_categories|reload_categories|edit_categories"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reminder_time_input))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–º–µ—Ç–∫–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_note))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(reminder_scheduler(application.bot))
    asyncio.create_task(categories_monitor())

async def reminder_scheduler(bot) -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    while True:
        try:
            await check_and_send_reminders(bot)
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60)

async def categories_monitor() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ categories.json –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            reload_result = reload_categories()

            if reload_result.get('loaded_from_file') and not reload_result.get('file_unchanged', False):
                logger.info("–§–∞–π–ª categories.json –∏–∑–º–µ–Ω–µ–Ω, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            elif reload_result.get('error'):
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ categories.json: {reload_result.get('error')}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await asyncio.sleep(300)

async def check_and_send_reminders(bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with aiosqlite.connect(DATABASE_PATH) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute('SELECT user_id FROM users') as cursor:
                users = [row['user_id'] for row in await cursor.fetchall()]

        for user_id in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = await Database.get_reminder_settings(user_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                active_session = await Database.get_active_session(user_id)

                if active_session:
                    session_start = datetime.datetime.fromisoformat(active_session['start_time'])
                    current_time = datetime.datetime.now()
                    session_duration = (current_time - session_start).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ)
                    if (settings['work_reminder_enabled'] and
                        session_duration >= settings['work_reminder_minutes']):

                        last_reminder = await Database.get_last_reminder_time(user_id, 'work_reminder')
                        minutes_since_last = (current_time - last_reminder).total_seconds() / 60

                        if minutes_since_last >= settings['work_reminder_minutes']:
                            await send_work_reminder(bot, user_id, active_session)
                            await Database.log_sent_reminder(user_id, 'work_reminder', active_session['id'])

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞)
                    if (settings['break_reminder_enabled'] and
                        session_duration >= settings['break_reminder_minutes']):

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–µ–¥–∞–≤–Ω–æ
                        breaks = await Database.get_session_breaks(active_session['id'])
                        has_recent_break = any(
                            datetime.datetime.fromisoformat(b['start_time']) > current_time - datetime.timedelta(minutes=settings['break_reminder_minutes'])
                            for b in breaks if b['start_time']
                        )

                        if not has_recent_break:
                            last_reminder = await Database.get_last_reminder_time(user_id, 'break_reminder')
                            minutes_since_last = (current_time - last_reminder).total_seconds() / 60

                            if minutes_since_last >= settings['break_reminder_minutes']:
                                await send_break_reminder(bot, user_id, active_session)
                                await Database.log_sent_reminder(user_id, 'break_reminder', active_session['id'])

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –æ—á–µ–Ω—å –¥–æ–ª–≥–∞—è)
                    if (settings['long_break_reminder_enabled'] and
                        session_duration >= settings['long_break_reminder_minutes']):

                        last_reminder = await Database.get_last_reminder_time(user_id, 'long_break_reminder')
                        minutes_since_last = (current_time - last_reminder).total_seconds() / 60

                        if minutes_since_last >= settings['long_break_reminder_minutes']:
                            await send_long_break_reminder(bot, user_id, active_session)
                            await Database.log_sent_reminder(user_id, 'long_break_reminder', active_session['id'])

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
                if settings['daily_goal_enabled']:
                    today_start = datetime.datetime.combine(datetime.date.today(), datetime.time.min)
                    today_end = datetime.datetime.combine(datetime.date.today(), datetime.time.max)

                    daily_sessions = await Database.get_sessions_by_timeframe(user_id, today_start, today_end)
                    daily_duration = sum(s['duration'] for s in daily_sessions if s['duration'])

                    if daily_duration >= settings['daily_goal_minutes'] * 60:  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
                        last_reminder = await Database.get_last_reminder_time(user_id, 'daily_goal')
                        minutes_since_last = (datetime.datetime.now() - last_reminder).total_seconds() / 60

                        if minutes_since_last >= 60:  # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–∞–∑ –≤ —á–∞—Å –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                            await send_daily_goal_reminder(bot, user_id, daily_duration)
                            await Database.log_sent_reminder(user_id, 'daily_goal')

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

async def send_work_reminder(bot, user_id: int, session) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ."""
    try:
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data=CB_BREAK_WORK)],
            [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=CB_END_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "üíº <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ</b>\n\n"
                "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥–æ–ª–≥–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤!\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session['category']}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π."
            ),
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_break_reminder(bot, user_id: int, session) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ."""
    try:
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data=CB_BREAK_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚òï <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞</b>\n\n"
                "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤!\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session['category']}"
            ),
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_long_break_reminder(bot, user_id: int, session) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–ª–∏–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ."""
    try:
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –°–¥–µ–ª–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", callback_data=CB_BREAK_WORK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞</b>\n\n"
                "–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {session['category']}"
            ),
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–ª–∏–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_daily_goal_reminder(bot, user_id: int, daily_duration: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏."""
    try:
        hours, remainder = divmod(daily_duration, 3600)
        minutes, seconds = divmod(remainder, 60)

        await bot.send_message(
            chat_id=user_id,
            text=(
                "üéØ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã!\n\n"
                f"–°–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º\n"
                "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å."
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)
    if update and isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

if __name__ == "__main__":
    main()